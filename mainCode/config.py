#######################################
# This is the main configuration file
# for setting up a 1D FFNN to predict
# CO fields above a 4x5 degree region 
# of the earth. We have squashed all 
# vertical information by way of 
# averaging.
#######################################

# Import modules
import numpy as np
import os.path
from time import gmtime, strftime

### Path information ###

# Get the home directory
home_dir = os.path.expanduser("~") + "/"

# The folder name for the files 
# generated by a single training
# and evaluating of the network
run_name = strftime("%m%d%Yrun", gmtime())

# Check if the save folder 
# exists. If not, then generate
# the folder to store files
save_dir = home_dir + 'phd-project/'  + run_name + '/'
if not os.path.exists(save_dir):
    os.makedirs(save_dir)

# The directory of raw data.
# Located on animus server
animus_dir = "/users/jk/13/dbj/NN_CO/"
data_subfolder = "run.v8-02-01.G5_tagco_new_3Dchem/timeseries2/"
data_dir = animus_dir + data_subfolder

### Creating filenames ###

# Create lists for names of files
emission_fnames = []
data_fnames = []
dates = []

# Years of data to use
years = ['2006', '2007', '2008', \
    '2009', '2010', '2011']
# What is the single testing year
testing_year = 2007

# Strings of months and days
months = ['0' + str(i) for i in range(1, 10)] \
    + [str(i) for i in range(10, 13)]
days = ['0' + str(i) for i in range(1, 10)] \
    + [str(i) for i in range(10, 32)]

# Make variables for prefix
# and suffix
prefix = 'v8.G5_4x5_tagCO_ts.'
suffix = '_new.nc'

# Temp lists to store invalid dates
tmp = []
tmp2 = []

# This loop generates the correct filenames
for y in years:

    emission_fnames.append(animus_dir + \
        'GEOS-Chem_CO_emiss_mass_NN_' + \
        y + '.nc')

    for m in months:
        for d in days:
            data_fnames.append(data_dir \
                + prefix \
                + '{0}{1}{2}'.format(y, m, d) \
                + suffix)
    
    for d in range(29, 32):
        if y != '2008':
            tmp.append(data_dir \
                + prefix \
                + '{0}02{1}'.format(y, d) \
                + suffix)

    for d in range(30, 32):
        if y == '2008':
            tmp.append(data_dir \
                + prefix \
                + '200802{0}'.format(d) \
                + suffix)

    for m in ['04', '06', '09', '11']:
        tmp.append(data_dir \
            + prefix \
            + '{0}{1}{2}'.format(y, m, '31') \
            + suffix)

for t in tmp:
    data_fnames.remove(t)

for t2 in tmp2:
    dates.remove(t2)

del tmp, tmp2

### Data Creation Controls ###

# Control what data is let 
# into the network
field = 1
pressure = 1
winds = 1
temp = 1
humidity = 1
pbl = 1

# Metadata Lists
uwind_metadata = ['DAO_3D_S__UWND', 'Uwind', 'm/s']
vwind_metadata = ['DAO_3D_S__VWND', 'Vwind', 'm/s']
pressure_metadata = ['PEDGE_S__PEDGE', 'Pressure', 'hPa']
temp_metadata = ['DAO_3D_S__TMPU', 'Temperature', 'K']
humidity_metadata = ['TIME_SER__RH', 'Humidity', '%']
pbl_metadata = ['PBLDEPTH__PBL_M', 'PBL', 'm']
source_metadata = ['CO__SRCE__COanth', 'COSource', 'kg']
field_metadata = ['IJ_AVG_S__CO', 'COField', 'ppbv']

# Construct metadatum list
metadatum = []

if winds:
    metadatum.append(uwind_metadata)
    metadatum.append(vwind_metadata)

if pressure:
    metadatum.append(pressure_metadata)

if temp:
    metadatum.append(temp_metadata)
    
if humidity:
    metadatum.append(humidity_metadata)
    
if pbl:
    metadatum.append(pbl_metadata)

if field:
    metadatum.append(field_metadata)

### Map Geometry to Analyze ###

# Latitude and longitude 
# indicies
lng_index1 = 51
lng_index2 = 52
lat_index1 = 29
lat_index2 = 30

# Create longitude 
# and latitude arrays
lons = np.arange(-180, 180, 5)
tmp = np.arange(-86, 87, 4)
tmp2 = np.append(tmp, 89)
lats = np.insert(tmp2, 0, -89)

# Total days, training 
# days, and testing days
num_years = len(years)
num_days = 0
# Number of points in total
N = 0
for yr in years:
    y = int(float(yr))
    if y % 4 != 0:
        N += 365 * 24
        num_days += 365
    else:
        N += 366 * 24
        num_days += 366
